/*====================================================================================
  ng1
  
  A simple cpu
====================================================================================*/
#include "DigilentSpartan3.ham"
/*====================================================================================
  pc
  
  The pc is an incrementor implemented in the carry logic.  The luts can implement
  a mux allowing us to jump to a target address or a return address. So here it is:
       _                   _     ___        
  V0--| \____VECTOR__VIN--| \___|  |___PCOUT
  V1--|_/           PCIN--|_/   |__|        
  VSEL_|            SEQ____/     /
                    RESET--------/          
                    IRQ----------/          
                    PCEN---------/          
  The PCIN and PCOUT are looped internally.  SEQ forces the sequential count.
====================================================================================*/
/*====================================================================================
  2-bit PC with a vector input.
  Designer:   Victor Yurkovsky  
  Date:       September 6 2012

inputs:
  CLK - system clock
  SEQ - mux control: 0 = count, 1=vector.
  VEC - vector input
  CIN - carry in. For the lowest circuit, it's count control.
outputs:
  PC  - count or vector output
  COUT- carry to connect to higher bits.  
  
  Note: we are using logic notation for the LUT inputs.  This allows PAR to swap LUT
  input pins.  To fix the pins, use 0x0000 initialization notation.
====================================================================================*/
Pc2(loc,init1:0,init0:0) input:(CLK,JUMP,VEC[2],CIN) output:(PC[2],UPC[2]/*unflopped*/,COUT){
  sl SLICEL loc:xy(0,0) cfg:{ CLKINV:CLK COUTUSED:0 CYINIT:CIN 
    YUSED:0 CY0G:0 CYSELG:G DYMUX:1 GYMUX:GXOR FFY:#FF FFY_INIT_ATTR:INIT!init1! G:#LUT:D=(~A3*A2)+(A3*A1)
    XUSED:0 CY0F:0 CYSELF:F DXMUX:1 FXMUX:FXOR FFX:#FF FFX_INIT_ATTR:INIT!init0! F:#LUT:D=(~A3*A2)+(A3*A1)  
  };  
  wire my CLK to sl's CLK;
  wire my CIN to sl's CIN;
  wire sl's COUT to my COUT;
  // lower part, known as F and X is low bit.  Upper half, G and Y is high bit 
  wire my VEC[0] to his F1;
  wire my VEC[1] to his G1;
  wire my JUMP to his G3, his F3;  //SEQ   1 means count (A2). 0 means vector(A1);
  //flopped PC is fed back to the input
  wire his XQ to his F2, my PC[0];  //complete the PC loop on A2
  wire his YQ to his G2, my PC[1];
  //unflopped PC
  wire his X to my UPC[0];
  wire his Y to my UPC[1];
}
/*====================================================================================
  2-bit PC with a vector input, low 2 bits
  Designer:   Victor Yurkovsky  
  Date:       September 10 2012

  Low 2 bits of the PC.  NOINC input suppresses incrementor (BX inv into carry chain).
inputs:
  CLK - system clock
  JUMP - mux control: 0 = count, 1=vector.
  VEC - vector input
  NOINC - 0=inc, 1=suppress incrementor.
outputs:
  PC  - count or vector output
  COUT- carry to connect to higher bits.  
  
  Note: we are using logic notation for the LUT inputs.  This allows PAR to swap LUT
  input pins.  To fix the pins, use 0x0000 initialization notation.
*/
Pc2low(loc,init1:0,init0:0) input:(CLK,JUMP,VEC[2],NOINC) output:(PC[2],UPC[2]/*unflopped*/,COUT){
  sl SLICEL loc:xy(0,0) cfg:{ CLKINV:CLK COUTUSED:0 CYINIT:BX BXINV:BX_B 
    YUSED:0 CY0G:0 CYSELG:G DYMUX:1 GYMUX:GXOR FFY:#FF FFY_INIT_ATTR:INIT!init1! G:#LUT:D=(~A3*A2)+(A3*A1)
    XUSED:0 CY0F:0 CYSELF:F DXMUX:1 FXMUX:FXOR FFX:#FF FFX_INIT_ATTR:INIT!init0! F:#LUT:D=(~A3*A2)+(A3*A1)  
  };  
  wire my CLK to sl's CLK;
  wire my NOINC to sl's BX;  //carry chain starts inverted
  wire sl's COUT to my COUT;
  // lower part, known as F and X is low bit.  Upper half, G and Y is high bit 
  wire my VEC[0] to his F1;
  wire my VEC[1] to his G1;
  wire my JUMP to his G3, his F3;  //SEQ   1 means count (A2). 0 means vector(A1);
  //flopped PC is fed back to the input
  wire his XQ to his F2, my PC[0];  //complete the PC loop on A2
  wire his YQ to his G2, my PC[1];
  //unflopped PC
  wire his X to my UPC[0];
  wire his Y to my UPC[1];
}

/*====================================================================================
  10-bit PC with a vector input.
  Designer:   Victor Yurkovsky  
  Date:       September 6 2012
shape:
  1x5
inputs:
  CLK - system clock
  SEQ - mux control: 1 = count, 2=vector.
  VEC - vector input
  CIN - carry in. For the lowest circuit, it's count control.
outputs:
  PC  - count or vector output
  COUT- carry to connect to higher bits.  
  
  Note: we are using logic notation for the LUT inputs.  This allows PAR to swap LUT
  input pins.  To fix the pins, use 0x0000 initialization notation.
====================================================================================*/
Pc10(loc) input:(CLK,JUMP,VEC[10],NOINC) output:(PC[10],UPC[10]){
  pce Pc2 loc:xy(0,4);
  pcd Pc2 loc:xy(0,3) init1:1 ;    //10
  pcc Pc2 loc:xy(0,2);            //00
  pcb Pc2 loc:xy(0,1);           //00
  pca Pc2low loc:xy(0,0);       //00
  //clocking
  wire my CLK to pca's CLK, pcb's CLK, pcc's CLK, pcd's CLK, pce's CLK;
  //carry propagation
  wire pcd's COUT to pce's CIN;
  wire pcc's COUT to pcd's CIN;
  wire pcb's COUT to pcc's CIN;
  wire pca's COUT to pcb's CIN;
  wire my NOINC to pca's NOINC; //initial carry in controls counting.
  //SEQ is shared across all pc units
  wire my JUMP to pca's JUMP, pcb's JUMP, pcc's JUMP, pcd's JUMP, pce's JUMP;
  //Vector is routed 2 bits per unit
  wire my VEC[8:9] to pce's VEC[0:1];
  wire my VEC[6:7] to pcd's VEC[0:1];
  wire my VEC[4:5] to pcc's VEC[0:1];
  wire my VEC[2:3] to pcb's VEC[0:1];
  wire my VEC[0:1] to pca's VEC[0:1];
  //finally, gather the outputs
  wire pce's PC[0:1] to my PC[8:9];
  wire pcd's PC[0:1] to my PC[6:7];
  wire pcc's PC[0:1] to my PC[4:5];
  wire pcb's PC[0:1] to my PC[2:3];
  wire pca's PC[0:1] to my PC[0:1];

  wire pce's UPC[0:1] to my UPC[8:9];
  wire pcd's UPC[0:1] to my UPC[6:7];
  wire pcc's UPC[0:1] to my UPC[4:5];
  wire pcb's UPC[0:1] to my UPC[2:3];
  wire pca's UPC[0:1] to my UPC[0:1];

}
/*====================================================================================
  Instruction detector.
  All 9-bit values with the high 4 bits set are instructions.  Not flopped, as we
  need to know immediately.
  
  Designer:   Victor Yurkovsky  
  Date:       September 12 2012
shape:
  X
inputs:
outputs:
====================================================================================*/
IsInst(loc) input(BIT[4]) output(ISINST){
  lut Flut4 loc:xy(0,0) init:A1+A2+A3+A4; 
  wire my BIT[0:3] to his F[0:3];
  wire his X to my ISINST;
}
top() {
  clk CLK_1Hz;
  // Debug output
  bug BugOut16 loc:xy(6,0);
  //-------------------------------
  // PC  Line it up with the ram bottom
  pc Pc10 loc:xy(0,2);  //OUT[0] will connect to ram's A3... Moving pc a bit up.
  wire clk's CLK to pc's CLK;
  //wire my vcc to pc's DOCNT;   //incrementor always on
  //-------------------------------
  // RAM 
  ram Ramb16_S9_S18 loc:RAMB16_X0Y0 fromfile:test.ram init_a:80;
  wire my vcc to ram's ENA, ram's ENB;
  wire my vcc to ram's WEA, ram's WEB, ram's SSRA, ram's SSRB; //we is active low.  SSR is active low
  wire clk's CLK to ram's CLK;
  //------------------------------------------------------------------
  // instruction detector
  isinst IsInst loc:xy(3,4);
  led Led0; //instruction lights led
  wire isinst ISINST to led's IN; 
  //------------------------------------------------------------------
  //pc drives instruction ram
  wire pc's UPC[0:9] to ram's ADDRA[0:9]; 
  wire my gnd to ram's ADDRA[10];
  //instruction ram's output drives table
  wire ram's DOA[0:8] to ram's ADDRB[0:8];
  wire my gnd to ram's ADDRB[9];
  wire ram's DOA[5:8] to isinst's BIT[0:3];
  
  //table output is presented to PC's as VEC for jumping
  wire ram's DOB[0:9] to pc's VEC[0:9]; 
  //-------------------------------------------------------------------
  // Instructions with the high 5 bits set are TABLE-driven
  // for now, sequential
  wire my gnd to pc's JUMP; //for now we do not jump
  wire my gnd to pc's NOINC; //always increment
  //debug output
  wire ram's DOA[0:7] to bug's IN[0:7];  //low 2 digits: 9-bit data
  wire pc's  PC[0:7] to bug's IN[8:15]; //high 2 digits: address
}
 
